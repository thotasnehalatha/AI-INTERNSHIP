{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNilpqtaZJA+5d9eqz+5gJf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/thotasnehalatha/AI-INTERNSHIP/blob/main/TIC-TAC-TOE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# A class representing the Tic-Tac-Toe game board\n",
        "class TicTacToe:\n",
        "    def __init__(self):\n",
        "        # A list to represent the 3x3 board\n",
        "        self.board = [' ' for _ in range(9)]\n",
        "        # 'X' is the AI, 'O' is the human player\n",
        "        self.ai_player = 'X'\n",
        "        self.human_player = 'O'\n",
        "\n",
        "    # Display the current state of the board\n",
        "    def print_board(self):\n",
        "        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:\n",
        "            print('| ' + ' | '.join(row) + ' |')\n",
        "\n",
        "    # Check for empty spots on the board\n",
        "    def available_moves(self):\n",
        "        return [i for i, spot in enumerate(self.board) if spot == ' ']\n",
        "\n",
        "    # Check for a winner\n",
        "    def check_winner(self, board, player):\n",
        "        # Check rows, columns, and diagonals for a win\n",
        "        win_conditions = [\n",
        "            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows\n",
        "            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns\n",
        "            [0, 4, 8], [2, 4, 6]             # Diagonals\n",
        "        ]\n",
        "        for condition in win_conditions:\n",
        "            if all(board[i] == player for i in condition):\n",
        "                return True\n",
        "        return False\n",
        "\n",
        "    # The Minimax algorithm\n",
        "    def minimax(self, board, is_maximizing):\n",
        "        # Base cases: return a score if a terminal state is reached\n",
        "        if self.check_winner(board, self.ai_player):\n",
        "            return 10\n",
        "        if self.check_winner(board, self.human_player):\n",
        "            return -10\n",
        "        if not self.available_moves():\n",
        "            return 0\n",
        "\n",
        "        if is_maximizing:\n",
        "            best_score = -math.inf\n",
        "            for move in self.available_moves():\n",
        "                # Make a hypothetical move for the AI\n",
        "                board[move] = self.ai_player\n",
        "                # Recursively call minimax for the human's turn\n",
        "                score = self.minimax(board, False)\n",
        "                # Undo the move\n",
        "                board[move] = ' '\n",
        "                best_score = max(best_score, score)\n",
        "            return best_score\n",
        "        else:\n",
        "            best_score = math.inf\n",
        "            for move in self.available_moves():\n",
        "                # Make a hypothetical move for the human\n",
        "                board[move] = self.human_player\n",
        "                # Recursively call minimax for the AI's turn\n",
        "                score = self.minimax(board, True)\n",
        "                # Undo the move\n",
        "                board[move] = ' '\n",
        "                best_score = min(best_score, score)\n",
        "            return best_score\n",
        "\n",
        "    # Find the best move for the AI\n",
        "    def best_move(self):\n",
        "        best_score = -math.inf\n",
        "        move = None\n",
        "        for available_move in self.available_moves():\n",
        "            self.board[available_move] = self.ai_player\n",
        "            score = self.minimax(self.board, False)\n",
        "            self.board[available_move] = ' '\n",
        "            if score > best_score:\n",
        "                best_score = score\n",
        "                move = available_move\n",
        "        return move\n",
        "\n",
        "    # The main game loop\n",
        "    def play_game(self):\n",
        "        print(\"Welcome to Tic-Tac-Toe!\")\n",
        "        self.print_board()\n",
        "\n",
        "        while True:\n",
        "            # Human's turn\n",
        "            human_move = int(input(\"Enter your move (0-8): \"))\n",
        "            if self.board[human_move] == ' ':\n",
        "                self.board[human_move] = self.human_player\n",
        "            else:\n",
        "                print(\"That spot is taken! Try again.\")\n",
        "                continue\n",
        "\n",
        "            self.print_board()\n",
        "\n",
        "            # Check for win or draw\n",
        "            if self.check_winner(self.board, self.human_player):\n",
        "                print(\"You win! ü•≥\")\n",
        "                break\n",
        "            if not self.available_moves():\n",
        "                print(\"It's a draw! ü§ù\")\n",
        "                break\n",
        "\n",
        "            # AI's turn\n",
        "            print(\"AI is making its move...\")\n",
        "            ai_move = self.best_move()\n",
        "            self.board[ai_move] = self.ai_player\n",
        "            self.print_board()\n",
        "\n",
        "            # Check for win or draw\n",
        "            if self.check_winner(self.board, self.ai_player):\n",
        "                print(\"AI wins! ü§ñ\")\n",
        "                break\n",
        "            if not self.available_moves():\n",
        "                print(\"It's a draw! ü§ù\")\n",
        "                break\n",
        "\n",
        "# Run the game\n",
        "if __name__ == \"__main__\":\n",
        "    game = TicTacToe()\n",
        "    game.play_game()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N5FgRqPAqqYC",
        "outputId": "79f8b326-491d-487c-a733-2d75f0d10b02"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to Tic-Tac-Toe!\n",
            "|   |   |   |\n",
            "|   |   |   |\n",
            "|   |   |   |\n",
            "Enter your move (0-8): 6\n",
            "|   |   |   |\n",
            "|   |   |   |\n",
            "| O |   |   |\n",
            "AI is making its move...\n",
            "|   |   |   |\n",
            "|   | X |   |\n",
            "| O |   |   |\n",
            "Enter your move (0-8): 0\n",
            "| O |   |   |\n",
            "|   | X |   |\n",
            "| O |   |   |\n",
            "AI is making its move...\n",
            "| O |   |   |\n",
            "| X | X |   |\n",
            "| O |   |   |\n",
            "Enter your move (0-8): 5\n",
            "| O |   |   |\n",
            "| X | X | O |\n",
            "| O |   |   |\n",
            "AI is making its move...\n",
            "| O | X |   |\n",
            "| X | X | O |\n",
            "| O |   |   |\n",
            "Enter your move (0-8): 7\n",
            "| O | X |   |\n",
            "| X | X | O |\n",
            "| O | O |   |\n",
            "AI is making its move...\n",
            "| O | X |   |\n",
            "| X | X | O |\n",
            "| O | O | X |\n",
            "Enter your move (0-8): 2\n",
            "| O | X | O |\n",
            "| X | X | O |\n",
            "| O | O | X |\n",
            "It's a draw! ü§ù\n"
          ]
        }
      ]
    }
  ]
}